#version 330

smooth in vec2 uv;
smooth in vec4 theColor;
smooth in vec3 o_normal;
smooth in vec3 o_position;
in vec3 normal;
in vec4 shadow_coord;
out vec4 outputColor;

uniform sampler2D tex;
uniform sampler2D light_depth;
uniform sampler2D blurred_texture;

void main()
{
  vec3 light_pos = vec3(0.0,0.0,15.0);
  vec3 light_dir = normalize(light_pos-o_position);
  float intensity = max(dot(normalize(o_normal),light_dir),0.0);
  
  vec4 shadow_coord_mod = shadow_coord / shadow_coord.w;
  shadow_coord_mod = shadow_coord_mod / 2 + 0.5;

  int levelofdetail = 0;
  float bias = 0.005;
  float visibility = 1.0;
  if ( textureLod( light_depth, shadow_coord_mod.xy , levelofdetail).r  <  shadow_coord_mod.z-bias){
    visibility = 0.5;
  }

if(shadow_coord_mod.x < 0+bias || shadow_coord_mod.x > 1.0-bias || shadow_coord_mod.y < 0+bias || shadow_coord_mod.y > 1.0-bias) {
  visibility = 1.0;
}

  outputColor = textureLod(tex, uv, levelofdetail) * (intensity*0.8 + 0.5) * visibility;  


  //outputColor = textureLod(tex, uv, levelofdetail) * (intensity*0.8 + 0.2) * visibility;  
  //outputColor = (textureLod(tex, uv, levelofdetail) + (textureLod(blurred_texture, uv, levelofdetail))) * (intensity*0.8 + 0.2) * visibility;  
  
  //outputColor = textureLod(blurred_texture, uv, levelofdetail);
  //outputColor = textureLod(light_depth,shadow_coord_mod.xy,levelofdetail);
  //outputColor = vec4(shadow_coord_mod.xyz,1);
  //outputColor = texture( light_depth, shadow_coord_mod.xy);
  //outputColor.a = 1.0;
}

